name: Release

on:
  push:
    tags:
      - 'v*.*.*'  # 语义化版本标签
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        type: string
      prerelease:
        description: 'Mark as pre-release'
        required: false
        type: boolean
        default: false
      draft:
        description: 'Create as draft release'
        required: false
        type: boolean
        default: false
      generate_changelog:
        description: 'Auto-generate changelog'
        required: false
        type: boolean
        default: true

# 并发控制：确保只有一个发布工作流在运行
concurrency:
  group: release-${{ github.ref }}
  cancel-in-progress: false  # 不取消进行中的发布，避免部分发布状态

permissions:
  contents: write
  packages: write
  deployments: write
  actions: read

env:
  NODE_VERSION: '18'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  RELEASE_BRANCH: main

jobs:
  # 预检查和验证
  pre-release-validation:
    name: 🔍 Pre-release Validation
    runs-on: ubuntu-latest
    
    outputs:
      version: ${{ steps.get_version.outputs.version }}
      version_clean: ${{ steps.get_version.outputs.version_clean }}
      is_prerelease: ${{ steps.check_prerelease.outputs.is_prerelease }}
  pre-release-check:
    name: � Pre-release Check
    runs-on: ubuntu-latest
    
    outputs:
      version: ${{ steps.get_version.outputs.version }}
      is_prerelease: ${{ steps.check_prerelease.outputs.is_prerelease }}
      
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: 🏷️ Get version
      id: get_version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          VERSION="${{ github.event.inputs.version }}"
        else
          VERSION=${GITHUB_REF#refs/tags/}
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Version: $VERSION" >> $GITHUB_STEP_SUMMARY
        
    - name: 🔍 Check if pre-release
      id: check_prerelease
      run: |
        VERSION="${{ steps.get_version.outputs.version }}"
        if [[ "$VERSION" =~ -(alpha|beta|rc|pre) ]] || [ "${{ github.event.inputs.prerelease }}" = "true" ]; then
          echo "is_prerelease=true" >> $GITHUB_OUTPUT
          echo "This is a pre-release" >> $GITHUB_STEP_SUMMARY
        else
          echo "is_prerelease=false" >> $GITHUB_OUTPUT
          echo "This is a stable release" >> $GITHUB_STEP_SUMMARY
        fi
        
    - name: � Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: 📋 Install dependencies
      run: npm ci
      
    - name: 🔍 Validate version
      run: |
        PACKAGE_VERSION=$(node -p "require('./package.json').version")
        RELEASE_VERSION="${{ steps.get_version.outputs.version }}"
        RELEASE_VERSION=${RELEASE_VERSION#v}  # 移除v前缀
        
        echo "Package version: $PACKAGE_VERSION"
        echo "Release version: $RELEASE_VERSION"
        
        if [ "$PACKAGE_VERSION" != "$RELEASE_VERSION" ]; then
          echo "❌ Version mismatch between package.json and release tag"
          exit 1
        fi
        echo "✅ Version validation passed" >> $GITHUB_STEP_SUMMARY
        
    - name: 🧪 Run tests
      run: |
        npm run type-check
        npm run test
        npm run build

  # 创建Release
  create-release:
    name: 📦 Create Release
    runs-on: ubuntu-latest
    needs: pre-release-check
    
    permissions:
      contents: write
      packages: write
      
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      release_id: ${{ steps.create_release.outputs.id }}
      
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: 📝 Generate changelog
      id: changelog
      run: |
        echo "## 🚀 What's New in ${{ needs.pre-release-check.outputs.version }}" > CHANGELOG.md
        echo "" >> CHANGELOG.md
        
        # 获取上一个标签
        PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^1 2>/dev/null || echo "")
        
        if [ -n "$PREVIOUS_TAG" ]; then
          echo "### � Changes since $PREVIOUS_TAG" >> CHANGELOG.md
          echo "" >> CHANGELOG.md
          
          # 生成变更日志
          git log --pretty=format:"- %s (%h)" $PREVIOUS_TAG..HEAD | grep -E "^- (feat|fix|docs|style|refactor|test|chore)" >> CHANGELOG.md || true
          
          # 添加贡献者
          echo "" >> CHANGELOG.md
          echo "### 👥 Contributors" >> CHANGELOG.md
          git log --pretty=format:"- %an" $PREVIOUS_TAG..HEAD | sort | uniq >> CHANGELOG.md
        else
          echo "### 🎉 Initial Release" >> CHANGELOG.md
          echo "- First release of API Server" >> CHANGELOG.md
          echo "- Full-stack TCP/UDP/MQTT network service dashboard" >> CHANGELOG.md
          echo "- Modern Vue.js frontend with TypeScript backend" >> CHANGELOG.md
        fi
        
        echo "" >> CHANGELOG.md
        echo "### 🐳 Docker Image" >> CHANGELOG.md
        echo "\`\`\`bash" >> CHANGELOG.md
        echo "docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.pre-release-check.outputs.version }}" >> CHANGELOG.md
        echo "\`\`\`" >> CHANGELOG.md
        
    - name: 📦 Create Release
      id: create_release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ needs.pre-release-check.outputs.version }}
        name: API Server ${{ needs.pre-release-check.outputs.version }}
        body_path: CHANGELOG.md
        draft: false
        prerelease: ${{ needs.pre-release-check.outputs.is_prerelease }}
        generate_release_notes: true

  # 构建和发布
  build-and-release:
    name: 🏗️ Build & Release
    runs-on: ubuntu-latest
    needs: [pre-release-check, create-release]
    
    permissions:
      contents: write
      packages: write
      
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 📦 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: 📋 Install dependencies
      run: npm ci
      
    - name: 🏗️ Build application
      run: npm run build
      env:
        NODE_ENV: production
        VERSION: ${{ needs.pre-release-check.outputs.version }}
        
    - name: 📊 Build analysis
      run: |
        echo "## 📊 Build Analysis" >> $GITHUB_STEP_SUMMARY
        echo "### Frontend Build" >> $GITHUB_STEP_SUMMARY
        if [ -d "dist/client" ]; then
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          du -sh dist/client/* >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        fi
        echo "### Backend Build" >> $GITHUB_STEP_SUMMARY
        if [ -d "dist/server" ]; then
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          du -sh dist/server/* >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        fi
        
    - name: 📦 Create release archives
      run: |
        VERSION="${{ needs.pre-release-check.outputs.version }}"
        VERSION_NO_V=${VERSION#v}  # 移除v前缀
        
        # 创建完整发布包
        cd dist
        tar -czf ../api-server-${VERSION_NO_V}.tar.gz .
        cd ..
        
        # 创建源码包
        git archive --format=tar.gz --prefix=api-server-${VERSION_NO_V}/ HEAD > api-server-${VERSION_NO_V}-source.tar.gz
        
        # 创建校验和
        sha256sum *.tar.gz > checksums.txt
        
        echo "## 📦 Release Packages" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        ls -lh *.tar.gz >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        
    - name: 📤 Upload release assets
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ needs.pre-release-check.outputs.version }}
        files: |
          *.tar.gz
          checksums.txt

  # 构建并推送Docker镜像
  docker-release:
    name: 🐳 Docker Release
    runs-on: ubuntu-latest
    needs: [pre-release-check, create-release]
    
    permissions:
      contents: read
      packages: write
      
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐳 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: 🔑 Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: 🔑 Log in to Docker Hub
      if: secrets.DOCKERHUB_USERNAME && secrets.DOCKERHUB_TOKEN
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
        
    - name: 📝 Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: |
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          ${{ secrets.DOCKERHUB_USERNAME && format('{0}/api-server', secrets.DOCKERHUB_USERNAME) || '' }}
        tags: |
          type=semver,pattern={{version}},value=${{ needs.pre-release-check.outputs.version }}
          type=semver,pattern={{major}}.{{minor}},value=${{ needs.pre-release-check.outputs.version }}
          type=semver,pattern={{major}},value=${{ needs.pre-release-check.outputs.version }}
          type=raw,value=latest,enable=${{ needs.pre-release-check.outputs.is_prerelease == 'false' }}
        labels: |
          org.opencontainers.image.title=API Server
          org.opencontainers.image.description=Full-stack TCP/UDP/MQTT network service dashboard
          org.opencontainers.image.version=${{ needs.pre-release-check.outputs.version }}
          org.opencontainers.image.vendor=API Server Project
          
    - name: 🏗️ Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          VERSION=${{ needs.pre-release-check.outputs.version }}
          BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')
          GIT_COMMIT=${{ github.sha }}
          
    - name: 🔒 Security scan
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.pre-release-check.outputs.version }}
        format: 'table'
        output: 'trivy-results.txt'
        severity: 'CRITICAL,HIGH'
        
    - name: 📊 Generate SBOM
      run: |
        echo "## 🔍 Software Bill of Materials" >> $GITHUB_STEP_SUMMARY
        echo "- **Docker Image**: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.pre-release-check.outputs.version }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Platforms**: linux/amd64, linux/arm64" >> $GITHUB_STEP_SUMMARY
        echo "- **Build Date**: $(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> $GITHUB_STEP_SUMMARY
        echo "- **Git Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY

  # 部署到生产环境
  deploy-production:
    name: 🌟 Deploy to Production
    runs-on: ubuntu-latest
    needs: [create-release, docker-release]
    environment: production
    
    steps:
    - name: 🌟 Deploy to production
      run: |
        echo "🌟 Deploying version ${{ needs.create-release.outputs.version }} to production..."
        # 这里添加实际的生产环境部署命令
        # 例如：kubectl set image deployment/api-server api-server=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.create-release.outputs.version }}
        
    - name: 🔍 Production health check
      run: |
        echo "⏳ Verifying production deployment..."
        sleep 60
        # curl -f https://your-domain.com/api/health || exit 1
        echo "✅ Production deployment verified!"
        
    - name: 📢 Notify teams
      run: |
        echo "## 🎉 Release ${{ needs.create-release.outputs.version }} Deployed!" >> $GITHUB_STEP_SUMMARY
        echo "- **Environment**: Production" >> $GITHUB_STEP_SUMMARY
        echo "- **Docker Image**: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.create-release.outputs.version }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Deployed at**: $(date)" >> $GITHUB_STEP_SUMMARY
