name: Node.js CI

on:
  push:
    branches: [ "main", "develop" ]
    paths:
      - '**.js'
      - '**.ts'
      - '**.vue'
      - '**.json'
      - 'package*.json'
      - '.github/workflows/node.js.yml'
  pull_request:
    branches: [ "main", "develop" ]
  workflow_dispatch:
    inputs:
      test_coverage:
        description: 'Generate test coverage report'
        required: false
        type: boolean
        default: true
      matrix_os:
        description: 'Operating systems to test'
        required: false
        default: 'ubuntu-latest'
        type: choice
        options:
        - ubuntu-latest
        - windows-latest
        - macos-latest
        - all

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_ENV: test
  CI: true
  FORCE_COLOR: 1

jobs:
  test:
    name: 🧪 Test on ${{ matrix.os }} - Node.js ${{ matrix.node-version }}
    runs-on: ${{ matrix.os }}
    if: |
      github.event.inputs.matrix_os == 'all' || 
      github.event.inputs.matrix_os == matrix.os || 
      (github.event.inputs.matrix_os == '' && matrix.os == 'ubuntu-latest') ||
      (github.event_name != 'workflow_dispatch' && matrix.os == 'ubuntu-latest')

    strategy:
      matrix:
        node-version: [18.x, 20.x, 22.x]
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          # 为不同平台添加特定配置
          - os: windows-latest
            npm_config_cache: ~/.npm
          - os: macos-latest  
            npm_config_cache: ~/.npm
          - os: ubuntu-latest
            npm_config_cache: ~/.npm
      fail-fast: false  # 不让一个版本失败影响其他版本

    steps:
      # 1. 检出代码
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # 2. 设置 Node.js 环境
      - name: 📦 Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          cache-dependency-path: 'package-lock.json'

      # 3. 缓存 node_modules
      - name: 💾 Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            ${{ matrix.npm_config_cache }}
          key: ${{ runner.os }}-node${{ matrix.node-version }}-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node${{ matrix.node-version }}-
            ${{ runner.os }}-node-

      # 4. 安装依赖
      - name: 📋 Install dependencies
        run: |
          echo "Installing dependencies for ${{ matrix.os }} with Node.js ${{ matrix.node-version }}"
          npm ci
          npm ls --depth=0 || true

      # 5. 环境检查
      - name: 🔍 Environment check
        run: |
          echo "## 🔍 Environment Information" >> $GITHUB_STEP_SUMMARY
          echo "**OS**: ${{ matrix.os }}" >> $GITHUB_STEP_SUMMARY
          echo "**Node.js**: $(node --version)" >> $GITHUB_STEP_SUMMARY
          echo "**npm**: $(npm --version)" >> $GITHUB_STEP_SUMMARY
          echo "**Platform**: ${{ runner.os }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # 检查关键依赖
          echo "### 📦 Key Dependencies:" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          npm list typescript vue express --depth=0 2>/dev/null || echo "Some key dependencies not found" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

      # 6. 代码质量检查
      - name: 🔍 Type checking
        run: |
          echo "Running type checking..."
          if npm run type-check 2>&1 | tee type-check-${{ matrix.os }}-${{ matrix.node-version }}.log; then
            echo "✅ Type checking passed on ${{ matrix.os }} with Node.js ${{ matrix.node-version }}" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Type checking failed on ${{ matrix.os }} with Node.js ${{ matrix.node-version }}" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi

      # 7. 构建项目
      - name: 🏗️ Build project
        run: |
          echo "Building project..."
          if npm run build 2>&1 | tee build-${{ matrix.os }}-${{ matrix.node-version }}.log; then
            echo "✅ Build successful on ${{ matrix.os }} with Node.js ${{ matrix.node-version }}" >> $GITHUB_STEP_SUMMARY
            
            # 检查构建产物
            if [ -d "dist" ]; then
              BUILD_SIZE=$(du -sh dist/ | cut -f1)
              echo "📦 Build size: $BUILD_SIZE" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "❌ Build failed on ${{ matrix.os }} with Node.js ${{ matrix.node-version }}" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi

      # 8. 运行测试
      - name: 🧪 Run tests
        run: |
          echo "Running tests..."
          if npm run test 2>&1 | tee test-${{ matrix.os }}-${{ matrix.node-version }}.log; then
            echo "✅ Tests passed on ${{ matrix.os }} with Node.js ${{ matrix.node-version }}" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ Tests failed or not available on ${{ matrix.os }} with Node.js ${{ matrix.node-version }}" >> $GITHUB_STEP_SUMMARY
            # 不因测试失败而中断，继续其他检查
          fi

      # 9. 生成测试覆盖率报告 (仅在 ubuntu-latest + Node.js 18.x)
      - name: 📊 Generate coverage report
        if: matrix.os == 'ubuntu-latest' && matrix.node-version == '18.x' && (github.event.inputs.test_coverage == 'true' || github.event.inputs.test_coverage == '')
        run: |
          echo "## 📊 Test Coverage Analysis" >> $GITHUB_STEP_SUMMARY
          
          if npm run test:coverage 2>/dev/null; then
            echo "✅ Coverage report generated" >> $GITHUB_STEP_SUMMARY
            
            # 解析覆盖率数据
            if [ -f coverage/lcov.info ]; then
              echo "Coverage data available in lcov format" >> $GITHUB_STEP_SUMMARY
            fi
            
            if [ -f coverage/coverage-summary.json ]; then
              echo "### 📈 Coverage Summary:" >> $GITHUB_STEP_SUMMARY
              echo "\`\`\`json" >> $GITHUB_STEP_SUMMARY
              cat coverage/coverage-summary.json | head -20 >> $GITHUB_STEP_SUMMARY
              echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "⚠️ Coverage report generation not available or failed" >> $GITHUB_STEP_SUMMARY
          fi

      # 10. 上传覆盖率到 Codecov
      - name: 📤 Upload coverage to Codecov
        if: matrix.os == 'ubuntu-latest' && matrix.node-version == '18.x' && github.event_name == 'push'
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: coverage/lcov.info
          flags: unittests
          name: codecov-${{ matrix.os }}-node${{ matrix.node-version }}
          fail_ci_if_error: false
          verbose: true

      # 11. 安全性检查
      - name: 🔒 Security audit
        run: |
          echo "## 🔒 Security Audit - ${{ matrix.os }} Node.js ${{ matrix.node-version }}" >> $GITHUB_STEP_SUMMARY
          
          npm audit --audit-level=moderate --json > audit-${{ matrix.os }}-${{ matrix.node-version }}.json 2>/dev/null || true
          
          if [ -s audit-${{ matrix.os }}-${{ matrix.node-version }}.json ]; then
            TOTAL_VULNS=$(cat audit-${{ matrix.os }}-${{ matrix.node-version }}.json | jq -r '.metadata.vulnerabilities.total // 0')
            HIGH_VULNS=$(cat audit-${{ matrix.os }}-${{ matrix.node-version }}.json | jq -r '.metadata.vulnerabilities.high // 0')
            CRITICAL_VULNS=$(cat audit-${{ matrix.os }}-${{ matrix.node-version }}.json | jq -r '.metadata.vulnerabilities.critical // 0')
            
            if [ "$TOTAL_VULNS" -gt 0 ]; then
              echo "⚠️ Found $TOTAL_VULNS vulnerabilities ($CRITICAL_VULNS critical, $HIGH_VULNS high)" >> $GITHUB_STEP_SUMMARY
            else
              echo "✅ No security vulnerabilities found" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "✅ Security audit completed - no issues found" >> $GITHUB_STEP_SUMMARY
          fi

      # 12. 平台特定测试
      - name: �️ Platform-specific tests
        run: |
          echo "Running platform-specific tests for ${{ matrix.os }}..."
          
          case "${{ matrix.os }}" in
            "windows-latest")
              echo "Windows-specific checks..."
              # Windows 路径分隔符测试
              node -e "console.log('Path separator:', require('path').sep)"
              ;;
            "macos-latest")
              echo "macOS-specific checks..."
              # macOS 权限检查
              ls -la dist/ || true
              ;;
            "ubuntu-latest")
              echo "Linux-specific checks..."
              # Linux 文件权限检查
              ls -la dist/ || true
              ;;
          esac
          
          echo "✅ Platform-specific tests completed for ${{ matrix.os }}" >> $GITHUB_STEP_SUMMARY

      # 13. 上传测试结果和日志
      - name: 📤 Upload test artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ matrix.os }}-node${{ matrix.node-version }}
          path: |
            coverage/
            *.log
            audit-*.json
            test-results.xml
            junit.xml
          retention-days: 7

  # 集成测试作业
  integration-test:
    name: 🔗 Integration Tests
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push'

    services:
      # Redis 服务 (如果需要)
      redis:
        image: redis:alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js 18.x
        uses: actions/setup-node@v4
        with:
          node-version: '18.x'
          cache: 'npm'

      - name: 📋 Install dependencies
        run: npm ci

      - name: 🏗️ Build application
        run: npm run build

      - name: � Configure test environment
        run: |
          echo "Setting up integration test environment..."
          
          # 创建测试配置
          cat > .env.test << EOF
          NODE_ENV=test
          HTTP_PORT=3000
          HTTPS_PORT=3443
          TCP_PORT=8080
          UDP_PORT=8081
          MQTT_PORT=1883
          MQTTS_PORT=8883
          REDIS_URL=redis://localhost:6379
          EOF
          
          echo "✅ Test environment configured" >> $GITHUB_STEP_SUMMARY

      - name: 🚀 Start services
        run: |
          echo "Starting application services..."
          
          # 启动服务器
          npm run start &
          SERVER_PID=$!
          echo "SERVER_PID=$SERVER_PID" >> $GITHUB_ENV
          
          # 等待服务启动
          echo "Waiting for services to start..."
          sleep 15
          
          # 检查服务状态
          if curl -f http://localhost:3000/api/health 2>/dev/null; then
            echo "✅ HTTP server is running" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ HTTP server failed to start" >> $GITHUB_STEP_SUMMARY
          fi

      - name: 🧪 API endpoint tests
        run: |
          echo "## 🧪 API Integration Tests" >> $GITHUB_STEP_SUMMARY
          
          FAILED_TESTS=0
          TOTAL_TESTS=0
          
          # 测试健康检查端点
          echo "Testing health check endpoint..."
          TOTAL_TESTS=$((TOTAL_TESTS + 1))
          if curl -f -s http://localhost:3000/api/health | grep -q "ok\|healthy\|success"; then
            echo "✅ Health check: PASS" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Health check: FAIL" >> $GITHUB_STEP_SUMMARY
            FAILED_TESTS=$((FAILED_TESTS + 1))
          fi
          
          # 测试 TCP 状态端点
          echo "Testing TCP status endpoint..."
          TOTAL_TESTS=$((TOTAL_TESTS + 1))
          if curl -f -s http://localhost:3000/api/tcp/status | grep -q "status\|tcp"; then
            echo "✅ TCP status: PASS" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ TCP status: FAIL" >> $GITHUB_STEP_SUMMARY
            FAILED_TESTS=$((FAILED_TESTS + 1))
          fi
          
          # 测试 UDP 状态端点
          echo "Testing UDP status endpoint..."
          TOTAL_TESTS=$((TOTAL_TESTS + 1))
          if curl -f -s http://localhost:3000/api/udp/status | grep -q "status\|udp"; then
            echo "✅ UDP status: PASS" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ UDP status: FAIL" >> $GITHUB_STEP_SUMMARY
            FAILED_TESTS=$((FAILED_TESTS + 1))
          fi
          
          # 测试 MQTT 状态端点
          echo "Testing MQTT status endpoint..."
          TOTAL_TESTS=$((TOTAL_TESTS + 1))
          if curl -f -s http://localhost:3000/api/mqtt/status | grep -q "status\|mqtt"; then
            echo "✅ MQTT status: PASS" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ MQTT status: FAIL" >> $GITHUB_STEP_SUMMARY
            FAILED_TESTS=$((FAILED_TESTS + 1))
          fi
          
          # 测试静态文件服务
          echo "Testing static file serving..."
          TOTAL_TESTS=$((TOTAL_TESTS + 1))
          if curl -f -s http://localhost:3000/ | grep -q "html\|<!DOCTYPE\|API Server"; then
            echo "✅ Static files: PASS" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Static files: FAIL" >> $GITHUB_STEP_SUMMARY
            FAILED_TESTS=$((FAILED_TESTS + 1))
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📊 Test Results:" >> $GITHUB_STEP_SUMMARY
          echo "- **Total Tests**: $TOTAL_TESTS" >> $GITHUB_STEP_SUMMARY
          echo "- **Passed**: $((TOTAL_TESTS - FAILED_TESTS))" >> $GITHUB_STEP_SUMMARY
          echo "- **Failed**: $FAILED_TESTS" >> $GITHUB_STEP_SUMMARY
          echo "- **Success Rate**: $(( (TOTAL_TESTS - FAILED_TESTS) * 100 / TOTAL_TESTS ))%" >> $GITHUB_STEP_SUMMARY
          
          if [ $FAILED_TESTS -gt 0 ]; then
            echo "❌ Some integration tests failed" >> $GITHUB_STEP_SUMMARY
            exit 1
          else
            echo "✅ All integration tests passed!" >> $GITHUB_STEP_SUMMARY
          fi

      - name: 🧪 Protocol-specific tests
        run: |
          echo "## 🧪 Protocol Integration Tests" >> $GITHUB_STEP_SUMMARY
          
          # 测试 TCP 连接
          echo "Testing TCP connection..."
          if timeout 5 bash -c 'cat < /dev/null > /dev/tcp/localhost/8080' 2>/dev/null; then
            echo "✅ TCP port 8080 is accessible" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ TCP port 8080 may not be accessible" >> $GITHUB_STEP_SUMMARY
          fi
          
          # 测试 UDP 连接 (基本检查)
          echo "Testing UDP port..."
          if netstat -un | grep -q ":8081"; then
            echo "✅ UDP port 8081 is listening" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ UDP port 8081 may not be listening" >> $GITHUB_STEP_SUMMARY
          fi
          
          # 测试 MQTT 连接
          echo "Testing MQTT connection..."
          if timeout 5 bash -c 'cat < /dev/null > /dev/tcp/localhost/1883' 2>/dev/null; then
            echo "✅ MQTT port 1883 is accessible" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ MQTT port 1883 may not be accessible" >> $GITHUB_STEP_SUMMARY
          fi

      - name: 🛑 Stop services
        if: always()
        run: |
          echo "Stopping services..."
          if [ ! -z "$SERVER_PID" ]; then
            kill $SERVER_PID 2>/dev/null || true
            sleep 5
            # 强制终止如果仍在运行
            kill -9 $SERVER_PID 2>/dev/null || true
          fi
          
          # 清理可能占用端口的进程
          fuser -k 3000/tcp 2>/dev/null || true
          fuser -k 8080/tcp 2>/dev/null || true
          fuser -k 8081/udp 2>/dev/null || true
          fuser -k 1883/tcp 2>/dev/null || true
          
          echo "✅ Services stopped" >> $GITHUB_STEP_SUMMARY

  # 部署预检查
  deploy-check:
    name: 🚀 Deploy Readiness Check
    runs-on: ubuntu-latest
    needs: [test, integration-test]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18.x'
          cache: 'npm'

      - name: 📋 Install dependencies
        run: npm ci

      - name: 🏗️ Production build test
        run: |
          echo "## 🏗️ Production Build Validation" >> $GITHUB_STEP_SUMMARY
          
          # 设置生产环境变量
          export NODE_ENV=production
          
          if npm run build 2>&1 | tee production-build.log; then
            echo "✅ Production build successful" >> $GITHUB_STEP_SUMMARY
            
            # 分析生产构建
            if [ -d "dist" ]; then
              PROD_SIZE=$(du -sh dist/ | cut -f1)
              FILE_COUNT=$(find dist/ -type f | wc -l)
              echo "📦 Production build: $FILE_COUNT files, $PROD_SIZE total" >> $GITHUB_STEP_SUMMARY
              
              # 检查关键文件
              if [ -f "dist/index.html" ]; then
                echo "✅ index.html present" >> $GITHUB_STEP_SUMMARY
              else
                echo "❌ index.html missing" >> $GITHUB_STEP_SUMMARY
              fi
              
              # 检查 JS/CSS bundles
              JS_COUNT=$(find dist/ -name "*.js" | wc -l)
              CSS_COUNT=$(find dist/ -name "*.css" | wc -l)
              echo "📁 Assets: $JS_COUNT JS files, $CSS_COUNT CSS files" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "❌ Production build failed" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
            tail -20 production-build.log >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi

      - name: 📦 Create deployment package
        run: |
          echo "Creating deployment package..."
          
          # 创建部署包
          tar -czf api-server-deployment-${{ github.sha }}.tar.gz \
            dist/ \
            server/ \
            package.json \
            package-lock.json \
            README.md \
            --exclude="*.log" \
            --exclude="node_modules" \
            --exclude=".git"
          
          PACKAGE_SIZE=$(du -sh api-server-deployment-${{ github.sha }}.tar.gz | cut -f1)
          echo "📦 Deployment package size: $PACKAGE_SIZE" >> $GITHUB_STEP_SUMMARY

      - name: 📤 Upload deployment package
        uses: actions/upload-artifact@v4
        with:
          name: deployment-package-${{ github.sha }}
          path: api-server-deployment-${{ github.sha }}.tar.gz
          retention-days: 30

      - name: ✅ Deployment readiness summary
        run: |
          echo "## ✅ Deployment Readiness Summary" >> $GITHUB_STEP_SUMMARY
          echo "**Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "**Ready for**: ${{ github.ref == 'refs/heads/main' && 'Production' || 'Development' }} deployment" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ✅ Validation Checklist:" >> $GITHUB_STEP_SUMMARY
          echo "- [x] All tests passed" >> $GITHUB_STEP_SUMMARY
          echo "- [x] Integration tests successful" >> $GITHUB_STEP_SUMMARY
          echo "- [x] Production build validated" >> $GITHUB_STEP_SUMMARY
          echo "- [x] Deployment package created" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🚀 **Ready for deployment!**" >> $GITHUB_STEP_SUMMARY
